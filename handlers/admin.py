from telethon import events, Button
from loguru import logger
from typing import List
from database.db import Database
import Config

class AdminHandler:
    def __init__(self, client, db: Database):
        self.client = client
        self.db = db
        self.setup_handlers()

    def setup_handlers(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        self.client.add_event_handler(
            self.handle_start,
            events.NewMessage(pattern='/start')
        )
        self.client.add_event_handler(
            self.handle_add_admin,
            events.NewMessage(pattern='/add_admin')
        )
        self.client.add_event_handler(
            self.handle_remove_admin,
            events.NewMessage(pattern='/remove_admin')
        )
        self.client.add_event_handler(
            self.handle_list_admins,
            events.NewMessage(pattern='/list_admins')
        )
        self.client.add_event_handler(
            self.handle_admin_menu,
            events.CallbackQuery(pattern=b'admin_menu')
        )
        self.client.add_event_handler(
            self.handle_statistics,
            events.CallbackQuery(pattern=b'statistics')
        )

    async def get_admin_keyboard(self) -> List[List[Button]]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∞–¥–º–∏–Ω-–º–µ–Ω—é"""
        return [
            [Button.inline("üìá –ö–æ–Ω—Ç–∞–∫—Ç—ã", b"contacts_menu")],
            [Button.inline("üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", b"send_message")],
            [Button.inline("üóÇÔ∏è –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏", b"message_history")],
            [Button.inline("üîç –ü–æ–∏—Å–∫", b"search_menu")],
            [Button.inline("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏", b"manage_admins")],
            [Button.inline("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", b"statistics")],
            [Button.inline("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", b"settings")]
        ]

    async def handle_start(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        sender = await event.get_sender()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ Config
        if not Config.is_admin(sender.id) and not self.db.is_admin(sender.id):
            await event.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        await event.reply(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å CRM!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
            buttons=await self.get_admin_keyboard()
        )

    async def handle_add_admin(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /add_admin"""
        sender = await event.get_sender()
        if not self.db.is_admin(sender.id):
            await event.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º username –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            args = event.text.split()
            if len(args) != 2:
                await event.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_admin @username")
                return

            username = args[1].replace("@", "")
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user = await self.client.get_entity(username)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω–æ–º
            if self.db.is_admin(user.id):
                await event.reply(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
            self.db.add_admin(username, user.id)
            await event.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞: {e}")
            await event.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å username.")

    async def handle_remove_admin(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /remove_admin"""
        sender = await event.get_sender()
        if not self.db.is_admin(sender.id):
            await event.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
            return

        try:
            args = event.text.split()
            if len(args) != 2:
                await event.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_admin @username")
                return

            username = args[1].replace("@", "")
            user = await self.client.get_entity(username)
            
            if not self.db.is_admin(user.id):
                await event.reply(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
                return
            
            self.db.remove_admin(user.id)
            await event.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É–¥–∞–ª–µ–Ω –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞: {e}")
            await event.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    async def handle_list_admins(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /list_admins"""
        sender = await event.get_sender()
        if not self.db.is_admin(sender.id):
            await event.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
            return

        try:
            admins = self.db.get_all_admins()
            if not admins:
                await event.reply("üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç.")
                return

            message = "üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n\n"
            for i, admin in enumerate(admins, 1):
                message += f"{i}. @{admin.username} (ID: {admin.telegram_user_id})\n"

            await event.reply(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤: {e}")
            await event.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")

    async def handle_statistics(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        sender = await event.get_sender()
        if not self.db.is_admin(sender.id):
            await event.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", alert=True)
            return

        try:
            # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            contacts_count = self.db.get_contacts_count()
            messages_total = self.db.get_messages_count()
            messages_today = self.db.get_messages_count_by_period(1)
            messages_week = self.db.get_messages_count_by_period(7)
            admins_count = len(self.db.get_all_admins())

            stats_text = (
                "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ CRM —Å–∏—Å—Ç–µ–º—ã\n\n"
                f"üë• –ö–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ –±–∞–∑–µ: {contacts_count}\n"
                f"üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_total}\n"
                f"üìÖ –°–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {messages_today}\n"
                f"üìà –°–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é: {messages_week}\n"
                f"üõ°Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admins_count}"
            )

            await event.edit(
                stats_text,
                buttons=[[Button.inline("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", b"admin_menu")]]
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await event.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", alert=True)

    async def handle_admin_menu(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω-–º–µ–Ω—é"""
        sender = await event.get_sender()
        if not self.db.is_admin(sender.id):
            await event.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", alert=True)
            return

        await event.edit(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å CRM!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
            buttons=await self.get_admin_keyboard()
        ) 
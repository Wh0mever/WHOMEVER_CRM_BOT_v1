from telethon import events, Button
from loguru import logger
from typing import List, Optional
from database.db import Database
from database.models import Contact, Message

class MessageHandler:
    def __init__(self, client, db: Database):
        self.client = client
        self.db = db
        self.setup_handlers()

    def setup_handlers(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
        self.client.add_event_handler(
            self.handle_send_message_menu,
            events.CallbackQuery(pattern=b'send_message')
        )
        self.client.add_event_handler(
            self.handle_message_history,
            events.CallbackQuery(pattern=b'message_history')
        )
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.client.add_event_handler(
            self.handle_incoming_message,
            events.NewMessage(incoming=True)
        )

    async def handle_send_message_menu(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not self.db.is_admin(event.sender_id):
            await event.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", alert=True)
            return

        await event.edit(
            "üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏:",
            buttons=[
                [Button.inline("üìá –í—ã–±—Ä–∞—Ç—å –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤", b"select_contact_for_message")],
                [Button.inline("üì± –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", b"enter_phone_for_message")],
                [Button.inline("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", b"admin_menu")]
            ]
        )

    async def handle_select_contact_for_message(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not self.db.is_admin(event.sender_id):
            await event.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        contacts = self.db.get_recent_contacts(limit=10)
        
        buttons = []
        for contact in contacts:
            buttons.append([Button.inline(
                f"üë§ {contact.name} | üì± {contact.phone}",
                f"send_to_contact_{contact.id}".encode()
            )])
        
        buttons.append([Button.inline("üîç –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞", b"search_contact_for_message")])
        buttons.append([Button.inline("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", b"send_message")])

        await event.edit(
            "üìá –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:",
            buttons=buttons
        )

    async def handle_enter_phone_for_message(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not self.db.is_admin(event.sender_id):
            await event.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", alert=True)
            return

        await event.edit(
            "üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
            "–§–æ—Ä–º–∞—Ç: +7XXXXXXXXXX"
        )

        @self.client.on(events.NewMessage(from_users=event.sender_id))
        async def phone_handler(msg_event):
            try:
                phone = msg_event.text.strip()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞
                if not phone.startswith('+') or not phone[1:].isdigit():
                    await msg_event.reply(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞!\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: +7XXXXXXXXXX"
                    )
                    return

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç –≤ –±–∞–∑–µ
                contact = self.db.get_contact_by_phone(phone)
                if not contact:
                    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
                    await msg_event.reply(
                        "‚ùì –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π?",
                        buttons=[
                            [Button.inline("‚úÖ –î–∞, —Å–æ–∑–¥–∞—Ç—å", f"create_contact_{phone}".encode())],
                            [Button.inline("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", b"send_message")]
                        ]
                    )
                else:
                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    await self.prepare_message_sending(msg_event, contact)

                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                self.client.remove_event_handler(phone_handler)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}")
                await msg_event.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞.")

    async def prepare_message_sending(self, event, contact: Contact):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–æ–Ω—Ç–∞–∫—Ç—É"""
        await event.reply(
            f"üìù –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç—É:\n"
            f"üë§ {contact.name}\n"
            f"üì± {contact.phone}"
        )

        @self.client.on(events.NewMessage(from_users=event.sender_id))
        async def message_handler(msg_event):
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = await self.client.send_message(
                    contact.telegram_user_id or contact.phone,
                    msg_event.text
                )

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É
                self.db.add_message(
                    contact_id=contact.id,
                    message_id=message.id,
                    direction='outgoing',
                    text=msg_event.text
                )

                await msg_event.reply(
                    "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!",
                    buttons=[[Button.inline("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", b"send_message")]]
                )

                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                self.client.remove_event_handler(message_handler)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await msg_event.reply(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
                    buttons=[[Button.inline("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", b"send_message")]]
                )

    async def handle_message_history(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not self.db.is_admin(event.sender_id):
            await event.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", alert=True)
            return

        await event.edit(
            "üóÇÔ∏è –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            buttons=[
                [Button.inline("üìá –í—ã–±—Ä–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", b"select_contact_for_history")],
                [Button.inline("üì± –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", b"enter_phone_for_history")],
                [Button.inline("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", b"admin_menu")]
            ]
        )

    async def handle_incoming_message(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            sender = await event.get_sender()
            
            # –ò—â–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ –±–∞–∑–µ
            contact = self.db.get_contact_by_telegram_id(sender.id)
            if not contact:
                # –ï—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                phone = sender.phone if hasattr(sender, 'phone') else None
                contact_id = self.db.add_contact(
                    name=f"{sender.first_name or ''} {sender.last_name or ''}".strip(),
                    phone=phone or str(sender.id),
                    telegram_user_id=sender.id
                )
                contact = self.db.get_contact(contact_id)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É
            self.db.add_message(
                contact_id=contact.id,
                message_id=event.message.id,
                direction='incoming',
                text=event.message.text
            )

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
            admins = self.db.get_all_admins()
            for admin in admins:
                try:
                    await self.client.send_message(
                        admin.telegram_user_id,
                        f"üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞:\n"
                        f"üë§ {contact.name}\n"
                        f"üì± {contact.phone}\n\n"
                        f"üí¨ {event.message.text}"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞ {admin.username}: {e}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}") 
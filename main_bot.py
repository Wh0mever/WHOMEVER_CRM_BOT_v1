#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è Telegram CRM –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –æ–±—ã—á–Ω–æ–≥–æ –±–æ—Ç–∞
"""

import os
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, BotCommand
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from loguru import logger
import Config
from database.db import Database
from database.models import Contact, Message as DBMessage
from datetime import datetime
import re

# –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è userbot
from telethon import TelegramClient, types, events
from utils.telegram_contacts import TelegramContactsManager

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
os.makedirs(Config.LOGS_DIR, exist_ok=True)
os.makedirs(os.path.dirname(Config.DATABASE_PATH), exist_ok=True)
if Config.SAVE_MEDIA_FILES:
    os.makedirs(Config.MEDIA_DIR, exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.add(
    os.path.join(Config.LOGS_DIR, Config.LOG_FILE), 
    rotation=Config.LOG_MAX_SIZE, 
    level=Config.LOG_LEVEL,
    retention=Config.LOG_BACKUP_COUNT
)

if Config.LOG_TO_CONSOLE:
    logger.add(lambda msg: print(msg, end=""), level=Config.LOG_LEVEL)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=Config.BOT_TOKEN)
dp = Dispatcher()
db = Database(Config.DATABASE_PATH)

# Userbot –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
userbot_client = None
telegram_contacts_manager = None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è userbot –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
async def init_userbot_for_contacts():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è userbot –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    global userbot_client, telegram_contacts_manager
    
    try:
        if Config.AUTO_IMPORT_TO_TELEGRAM:
            logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è userbot –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤...")
            
            # –°–æ–∑–¥–∞–µ–º userbot –∫–ª–∏–µ–Ω—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            connection_params = Config.get_connection_params()
            userbot_client = TelegramClient(
                connection_params.pop("session"),  # –£–±–∏—Ä–∞–µ–º session –∏–∑ —Å–ª–æ–≤–∞—Ä—è
                connection_params.pop("api_id"),   # –£–±–∏—Ä–∞–µ–º api_id –∏–∑ —Å–ª–æ–≤–∞—Ä—è  
                connection_params.pop("api_hash"), # –£–±–∏—Ä–∞–µ–º api_hash –∏–∑ —Å–ª–æ–≤–∞—Ä—è
                **connection_params  # –ü–µ—Ä–µ–¥–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            )
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
            await userbot_client.start(phone=Config.PHONE_NUMBER)
            
            # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
            telegram_contacts_manager = TelegramContactsManager(userbot_client)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            @userbot_client.on(events.NewMessage)
            async def handle_userbot_message(event):
                """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç userbot"""
                await process_userbot_incoming_message(event)
            
            logger.info("‚úÖ Userbot –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            logger.info("‚ÑπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ userbot –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {e}")
        userbot_client = None
        telegram_contacts_manager = None

class BotHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –±–æ—Ç–∞"""
    
    @staticmethod
    def get_main_keyboard():
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        builder = InlineKeyboardBuilder()
        
        builder.button(text=Config.BUTTON_TEXTS["contacts_menu"], callback_data="contacts_menu")
        builder.button(text=Config.BUTTON_TEXTS["send_message"], callback_data="message_send")
        builder.button(text=Config.BUTTON_TEXTS["message_history"], callback_data="history_view")
        builder.button(text=Config.BUTTON_TEXTS["search"], callback_data="search_contacts")
        builder.button(text=Config.BUTTON_TEXTS["manage_admins"], callback_data="admin_manage")
        builder.button(text=Config.BUTTON_TEXTS["statistics"], callback_data="stats_view")
        
        builder.adjust(2)  # 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
        return builder.as_markup()
    
    @staticmethod
    def get_contacts_keyboard():
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω—é –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        builder = InlineKeyboardBuilder()
        
        builder.button(text=Config.BUTTON_TEXTS["add_contact"], callback_data="contacts_add")
        builder.button(text=Config.BUTTON_TEXTS["list_contacts"], callback_data="contacts_list")
        builder.button(text=Config.BUTTON_TEXTS["search_contacts"], callback_data="contacts_search")
        builder.button(text=Config.BUTTON_TEXTS["back"], callback_data="main_menu")
        
        builder.adjust(2, 1, 1)  # 2 –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É, –ø–æ 1 –≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
        return builder.as_markup()
    
    @staticmethod
    def is_admin(user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        return (Config.is_admin(user_id) or 
                db.is_admin(user_id) or
                user_id == Config.OWNER_ID)

async def process_userbot_incoming_message(event):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ userbot"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if event.is_private and not event.out:
            sender = await event.get_sender()
            sender_id = sender.id
            sender_name = sender.first_name or ""
            if sender.last_name:
                sender_name += f" {sender.last_name}"
            sender_username = sender.username or ""
            
            # –ò—â–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            contact = db.get_contact_by_telegram_id(sender_id)
            
            if contact:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                db.add_message(
                    contact_id=contact.id,
                    message_id=event.message.id,
                    direction="incoming",
                    text=event.message.text or "[–ú–µ–¥–∏–∞ —Ñ–∞–π–ª]"
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                await notify_admins_about_userbot_message(contact, event.message, sender)
                
                logger.info(f"üì® –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {contact.name} (ID: {contact.id})")
            else:
                # –ï—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
                logger.info(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {sender_name} (ID: {sender_id})")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è userbot: {e}")

async def notify_admins_about_userbot_message(contact, message, sender):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ userbot"""
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admins = db.get_all_admins()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = message.text or "[–ú–µ–¥–∏–∞ —Ñ–∞–π–ª]"
    
    notification_text = (
        f"üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n"
        f"üë§ <b>{contact.name}</b>\n"
        f"üì± {contact.phone}\n"
        f"üÜî ID: {contact.id}\n"
        f"üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {contact.note or '-'}\n\n"
        f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n"
        f"<blockquote>{message_text}</blockquote>\n\n"
        f"‚è∞ {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    builder = InlineKeyboardBuilder()
    builder.button(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{contact.id}")
    builder.button(text="üìñ –ò—Å—Ç–æ—Ä–∏—è", callback_data=f"history_{contact.id}")
    builder.button(text="üìá –ö–∞—Ä—Ç–æ—á–∫–∞", callback_data=f"view_contact_{contact.id}")
    builder.adjust(1)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
    for admin in admins:
        try:
            await bot.send_message(
                chat_id=admin.telegram_user_id,
                text=notification_text,
                reply_markup=builder.as_markup(),
                parse_mode="HTML"
            )
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin.username}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin.username}: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    
    user_id = message.from_user.id
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    if not Config.OWNER_ID:
        Config.OWNER_ID = user_id
        Config.OWNER_USERNAME = message.from_user.username or str(user_id)
        logger.info(f"üëë –í–ª–∞–¥–µ–ª–µ—Ü —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {message.from_user.full_name} (ID: {user_id})")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≤ –∞–¥–º–∏–Ω—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω)
        username = message.from_user.username or str(user_id)
        if not db.is_admin(user_id):
            db.add_admin(username, user_id)
            logger.info(f"üõ°Ô∏è –í–ª–∞–¥–µ–ª–µ—Ü –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: @{username}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ Config.ADMIN_IDS
        if user_id not in Config.ADMIN_IDS:
            Config.ADMIN_IDS.append(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not BotHandlers.is_admin(user_id):
        await message.reply(
            "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞."
        )
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    status = "–í–ª–∞–¥–µ–ª–µ—Ü" if user_id == Config.OWNER_ID else "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
    
    welcome_text = (
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CRM —Å–∏—Å—Ç–µ–º—É!\n\n"
        f"ü§ñ –†–µ–∂–∏–º: –û–±—ã—á–Ω—ã–π –±–æ—Ç\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name}\n"
        f"üõ°Ô∏è –°—Ç–∞—Ç—É—Å: {status}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
    )
    
    await message.reply(welcome_text, reply_markup=BotHandlers.get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.message(Command("add_admin"))
async def cmd_add_admin(message: Message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    
    if not BotHandlers.is_admin(message.from_user.id):
        await message.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    
    # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
    args = message.text.split()
    if len(args) != 2:
        await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_admin @username –∏–ª–∏ /add_admin USER_ID")
        return
    
    target = args[1]
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if target.startswith('@'):
            username = target[1:]
            user_id = None  # –í –æ–±—ã—á–Ω–æ–º –±–æ—Ç–µ —Å–ª–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ username
        else:
            user_id = int(target)
            username = target
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        if user_id:
            db.add_admin(username, user_id)
            Config.ADMIN_IDS.append(user_id)
            await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
        else:
            await message.reply("‚ùå –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ –Ω—É–∂–µ–Ω Telegram ID (—á–∏—Å–ª–æ)")
        
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

@dp.message(Command("list_admins"))
async def cmd_list_admins(message: Message):
    """–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    
    if not BotHandlers.is_admin(message.from_user.id):
        await message.reply("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    
    admins = db.get_all_admins()
    if not admins:
        await message.reply("üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç.")
        return
    
    admin_text = "üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n\n"
    for i, admin in enumerate(admins, 1):
        admin_text += f"{i}. @{admin.username} (ID: {admin.telegram_user_id})\n"
    
    await message.reply(admin_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫
@dp.callback_query(F.data.startswith(("contacts_", "main_", "message_", "search_", "admin_", "stats_")))
async def process_callback(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
    
    user_id = callback_query.from_user.id
    data = callback_query.data
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    if not BotHandlers.is_admin(user_id):
        await callback_query.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    try:
        if data == "main_menu":
            # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await callback_query.message.edit_text(
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é CRM —Å–∏—Å—Ç–µ–º—ã\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=BotHandlers.get_main_keyboard()
            )
        
        elif data == "contacts_menu":
            # –ú–µ–Ω—é –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
            await callback_query.message.edit_text(
                "üìá –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=BotHandlers.get_contacts_keyboard()
            )
        
        elif data == "contacts_add":
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
            await callback_query.message.edit_text(
                "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "–ò–º—è\n–¢–µ–ª–µ—Ñ–æ–Ω\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤\n"
                "+79001234567\n"
                "–í–ò–ü –∫–ª–∏–µ–Ω—Ç"
            )
        
        elif data == "contacts_list":
            # –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
            contacts = db.get_all_contacts(limit=Config.CONTACTS_PER_PAGE)
            
            if not contacts:
                builder = InlineKeyboardBuilder()
                builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="contacts_menu")
                
                await callback_query.message.edit_text(
                    "üìã –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø—É—Å—Ç.",
                    reply_markup=builder.as_markup()
                )
            else:
                contact_text = "üìã –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:\n\n"
                for contact in contacts:
                    contact_text += (
                        f"üë§ {contact.name}\n"
                        f"üì± {contact.phone}\n"
                        f"üìù {contact.note or '-'}\n"
                        f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                    )
                
                builder = InlineKeyboardBuilder()
                builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="contacts_menu")
                
                await callback_query.message.edit_text(contact_text, reply_markup=builder.as_markup())
        
        elif data == "stats_view":
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            contacts_count = db.get_contacts_count()
            messages_total = db.get_messages_count()
            messages_today = db.get_messages_count_by_period(1)
            messages_week = db.get_messages_count_by_period(7)
            admins_count = len(db.get_all_admins())
            
            stats_text = (
                "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ CRM —Å–∏—Å—Ç–µ–º—ã\n\n"
                f"üë• –ö–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ –±–∞–∑–µ: {contacts_count}\n"
                f"üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_total}\n"
                f"üìÖ –°–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {messages_today}\n"
                f"üìà –°–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é: {messages_week}\n"
                f"üõ°Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admins_count}"
            )
            
            builder = InlineKeyboardBuilder()
            builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
            
            await callback_query.message.edit_text(stats_text, reply_markup=builder.as_markup())
        
        elif data == "message_send":
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            await show_send_message_menu(callback_query)
        
        elif data == "history_view":
            # –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏
            await show_history_menu(callback_query)
        
        elif data == "search_contacts":
            # –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
            await show_search_menu(callback_query)
        
        elif data == "admin_manage":
            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
            await show_admin_menu(callback_query)
        
        elif data.startswith("remove_admin_"):
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            admin_id = int(data.split("_")[2])
            
            admin = next((a for a in db.get_all_admins() if a.telegram_user_id == admin_id), None)
            if admin:
                builder = InlineKeyboardBuilder()
                builder.button(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_remove_{admin_id}")
                builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_list")
                builder.adjust(1)
                
                await callback_query.message.edit_text(
                    f"‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ @{admin.username}?\n\n"
                    f"üÜî ID: {admin.telegram_user_id}",
                    reply_markup=builder.as_markup()
                )
            else:
                await callback_query.answer("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        
        elif data.startswith("confirm_remove_"):
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            admin_id = int(data.split("_")[2])
            
            try:
                db.remove_admin(admin_id)
                # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ Config
                if admin_id in Config.ADMIN_IDS:
                    Config.ADMIN_IDS.remove(admin_id)
                
                await callback_query.answer("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω")
                await show_admin_list(callback_query)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞: {e}")
                await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)
        
        else:
            await callback_query.answer("üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)
    
    await callback_query.answer()



async def handle_client_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞"""
    user_id = message.from_user.id
    username = message.from_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    full_name = message.from_user.full_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    text = message.text
    
    try:
        # –ò—â–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        contact = db.get_contact_by_telegram_id(user_id)
        
        if not contact:
            # –ï—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            phone = f"+{user_id}"  # –í—Ä–µ–º–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ ID
            contact_id = db.add_contact(full_name, phone, f"Telegram: @{username}")
            db.update_contact_telegram_id(contact_id, user_id)
            contact = db.get_contact(contact_id)
            logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {full_name} (ID: {user_id})")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        db.add_message(
            contact_id=contact.id,
            message_id=message.message_id,
            direction="incoming",
            text=text
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        await notify_admins_about_message(contact, message)
        
        # –û—Ç–≤–µ—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É
        await message.reply(
            "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏ –ø–µ—Ä–µ–¥–∞–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É.\n"
            "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def notify_admins_about_message(contact, client_message: Message):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"""
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admins = db.get_all_admins()
    
    notification_text = (
        f"üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞!\n\n"
        f"üë§ {contact.name}\n"
        f"üì± {contact.phone}\n"
        f"üÜî ID: {contact.id}\n"
        f"üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {contact.note or '-'}\n\n"
        f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:\n"
        f"<blockquote>{client_message.text}</blockquote>\n\n"
        f"‚è∞ {client_message.date.strftime('%d.%m.%Y %H:%M')}"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    builder = InlineKeyboardBuilder()
    builder.button(text="üìñ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞", callback_data=f"history_{contact.id}")
    builder.button(text="üí¨ –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç", callback_data=f"reply_{contact.id}")
    builder.button(text="üìá –ö–∞—Ä—Ç–æ—á–∫–∞", callback_data=f"contact_{contact.id}")
    builder.adjust(1)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
    for admin in admins:
        try:
            await bot.send_message(
                chat_id=admin.telegram_user_id,
                text=notification_text,
                reply_markup=builder.as_markup(),
                parse_mode="HTML"
            )
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin.username}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin.username}: {e}")

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.callback_query(F.data.startswith(("history_", "contact_", "send_reply_", "view_history_")))
async def handle_client_callbacks(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏"""
    
    user_id = callback_query.from_user.id
    data = callback_query.data
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    if not BotHandlers.is_admin(user_id):
        await callback_query.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    try:
        if data == "history_view":
            # –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            await show_history_menu(callback_query)
            
        elif data == "history_by_contact":
            # –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
            await show_contacts_for_history(callback_query)
            
        elif data.startswith("view_history_"):
            # –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
            contact_id = int(data.split("_")[2])
            await show_chat_history(callback_query, contact_id)
            
        elif data.startswith("history_contacts_page_"):
            # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
            page = int(data.split("_")[3])
            await show_contacts_for_history(callback_query, page)
            
        elif data == "history_search_contact":
            await callback_query.answer("üîç –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)
            
        elif data == "history_stats":
            await callback_query.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)
            
        elif data.startswith("history_"):
            # –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ (–¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å —á–∏—Å–ª–æ–≤—ã–º ID)
            try:
                contact_id = int(data.split("_")[1])
                await show_chat_history(callback_query, contact_id)
            except ValueError:
                await callback_query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback", show_alert=True)
            
        elif data.startswith("contact_"):
            # –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –∫–æ–Ω—Ç–∞–∫—Ç–∞
            contact_id = int(data.split("_")[1])
            await show_contact_card(callback_query, contact_id)
            
        elif data.startswith("send_reply_"):
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
            await callback_query.answer("üí¨ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏", show_alert=True)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)
    
    await callback_query.answer()

async def show_chat_history(callback_query: CallbackQuery, contact_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º —á–µ—Ä–µ–∑ userbot"""
    
    contact = db.get_contact(contact_id)
    if not contact:
        await callback_query.answer("‚ùå –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–µ—Ä–µ–∑ userbot –∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await callback_query.answer("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –∏—Å—Ç–æ—Ä–∏—é...", show_alert=False)
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å Telegram —á–µ—Ä–µ–∑ userbot
        if userbot_client and contact.telegram_user_id:
            await sync_chat_history_from_telegram(contact_id, contact.telegram_user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –±–∞–∑—ã
        messages = db.get_contact_messages(contact_id, limit=Config.MESSAGE_HISTORY_LIMIT)
        
        if not messages:
            history_text = f"üìñ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —Å {contact.name}\n\nüì≠ –°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç"
        else:
            history_text = f"üìñ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —Å {contact.name}\n\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å–Ω–∞—á–∞–ª–∞ —Å—Ç–∞—Ä—ã–µ)
            for msg in reversed(messages):
                direction_icon = "üì§" if msg.direction == "outgoing" else "üì®"
                timestamp = msg.timestamp.strftime('%d.%m %H:%M')
                
                # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                text_preview = msg.text or "[–ú–µ–¥–∏–∞ —Ñ–∞–π–ª]"
                if len(text_preview) > 80:
                    text_preview = text_preview[:80] + "..."
                
                history_text += f"{direction_icon} <b>{timestamp}</b>\n{text_preview}\n\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        builder = InlineKeyboardBuilder()
        builder.button(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{contact_id}")
        builder.button(text="üìá –ö–∞—Ä—Ç–æ—á–∫–∞", callback_data=f"view_contact_{contact_id}")
        builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"history_{contact_id}")
        builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        builder.adjust(2, 2)
        
        await callback_query.message.edit_text(
            history_text, 
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞: {e}")
        await callback_query.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ —Å {contact.name}",
            reply_markup=InlineKeyboardBuilder().button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu").as_markup()
        )

async def sync_chat_history_from_telegram(contact_id: int, telegram_user_id: int):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ —Å Telegram —á–µ—Ä–µ–∑ userbot"""
    try:
        if not userbot_client:
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞ —á–µ—Ä–µ–∑ userbot
        async for message in userbot_client.iter_messages(telegram_user_id, limit=50):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ
            existing_message = db.get_message_by_id(contact_id, message.id)
            
            if not existing_message:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                direction = "outgoing" if message.out else "incoming"
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É
                db.add_message(
                    contact_id=contact_id,
                    message_id=message.id,
                    direction=direction,
                    text=message.text or "[–ú–µ–¥–∏–∞ —Ñ–∞–π–ª]"
                )
                
        logger.info(f"üìã –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ ID: {contact_id}")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞: {e}")

async def show_reply_interface(callback_query: CallbackQuery, contact_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É"""
    
    contact = db.get_contact(contact_id)
    if not contact:
        await callback_query.answer("‚ùå –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    reply_text = (
        f"üí¨ –û—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É: {contact.name}\n\n"
        f"üì± {contact.phone}\n"
        f"üìù {contact.note or '–ë–µ–∑ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π'}\n\n"
        f"‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n"
        f"–û–Ω –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É."
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è (FSM)
    callback_query.message.reply_to_contact_id = contact_id
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üìñ –ò—Å—Ç–æ—Ä–∏—è", callback_data=f"history_{contact_id}")
    builder.button(text="üìá –ö–∞—Ä—Ç–æ—á–∫–∞", callback_data=f"contact_{contact_id}")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")
    builder.adjust(2, 1)
    
    await callback_query.message.edit_text(
        reply_text, 
        reply_markup=builder.as_markup()
    )

async def show_contact_card(callback_query: CallbackQuery, contact_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    
    contact = db.get_contact(contact_id)
    if not contact:
        await callback_query.answer("‚ùå –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
    messages = db.get_contact_messages(contact_id, limit=100)
    incoming_count = len([m for m in messages if m.direction == "incoming"])
    outgoing_count = len([m for m in messages if m.direction == "outgoing"])
    
    card_text = (
        f"üìá –ö–∞—Ä—Ç–æ—á–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞\n\n"
        f"üë§ <b>–ò–º—è:</b> {contact.name}\n"
        f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {contact.phone}\n"
        f"üìù <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> {contact.note or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"üÜî <b>ID:</b> {contact.id}\n"
        f"üìÖ <b>–î–æ–±–∞–≤–ª–µ–Ω:</b> {contact.date_added.strftime('%d.%m.%Y %H:%M')}\n\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"üì® –í—Ö–æ–¥—è—â–∏—Ö: {incoming_count}\n"
        f"üì§ –ò—Å—Ö–æ–¥—è—â–∏—Ö: {outgoing_count}\n"
        f"üí¨ –í—Å–µ–≥–æ: {len(messages)}"
    )
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üìñ –ò—Å—Ç–æ—Ä–∏—è", callback_data=f"history_{contact_id}")
    if contact.telegram_user_id:
        builder.button(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{contact_id}")
    else:
        builder.button(text="üîó –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Telegram ID", callback_data=f"set_telegram_id_{contact_id}")
    builder.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{contact_id}")
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    builder.adjust(2, 1, 1)
    
    await callback_query.message.edit_text(
        card_text, 
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
user_reply_states = {}
user_search_states = {}
user_message_states = {}

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
@dp.message(F.text)
async def handle_text_messages_updated(message: Message):
    """–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ—Ç–≤–µ—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞–º"""
    
    user_id = message.from_user.id
    
    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
    if not BotHandlers.is_admin(user_id):
        await handle_client_message(message)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
    if user_id in user_reply_states:
        contact_id = user_reply_states[user_id]
        await send_reply_to_client(message, contact_id)
        del user_reply_states[user_id]
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –ø–æ–∏—Å–∫
    if user_id in user_search_states:
        await perform_search(message, message.text)
        del user_search_states[user_id]
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    if user_id in user_message_states:
        contact_id = user_message_states[user_id]
        await send_message_to_client(message, contact_id)
        del user_message_states[user_id]
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ö–æ–∂–µ –ª–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    lines = message.text.strip().split('\n')
    if len(lines) >= 2:
        name = lines[0].strip()
        phone = lines[1].strip()
        note = lines[2].strip() if len(lines) > 2 else None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if re.match(Config.PHONE_REGEX, phone):
            try:
                # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ –±–∞–∑—É
                contact_id = db.add_contact(name, phone, note)
                
                response_text = (
                    f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                    f"üë§ –ò–º—è: {name}\n"
                    f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                    f"üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {note if note else '-'}\n"
                    f"üÜî ID –≤ –±–∞–∑–µ: {contact_id}"
                )
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ Telegram –∏ –ø–æ–ª—É—á–∞–µ–º telegram_user_id
                if telegram_contacts_manager:
                    try:
                        telegram_result = await telegram_contacts_manager.add_contact_to_telegram(name, phone)
                        
                        if telegram_result["success"]:
                            # –û–±–Ω–æ–≤–ª—è–µ–º telegram_user_id –≤ –±–∞–∑–µ
                            db.update_contact_telegram_id(contact_id, telegram_result["user_id"])
                            
                            username_info = f" (@{telegram_result['username']})" if telegram_result["username"] else ""
                            response_text += f"\n\nüì≤ <b>Telegram:</b> –ù–∞–π–¥–µ–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω{username_info}"
                            response_text += f"\n‚úÖ <b>Telegram ID:</b> {telegram_result['user_id']}"
                            
                            logger.info(f"üì± –ö–æ–Ω—Ç–∞–∫—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ Telegram: {name} -> {telegram_result['user_id']}")
                        else:
                            response_text += f"\n\n‚ö†Ô∏è <b>Telegram:</b> {telegram_result['message']}"
                            response_text += f"\n‚ùå <b>Telegram ID:</b> –ù–µ –Ω–∞–π–¥–µ–Ω"
                            
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –≤ Telegram: {e}")
                        response_text += f"\n\n‚ö†Ô∏è <b>Telegram:</b> –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"
                        response_text += f"\n‚ùå <b>Telegram ID:</b> –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                else:
                    response_text += f"\n\n‚ùå <b>Telegram ID:</b> –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (userbot –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω)"
                
                builder = InlineKeyboardBuilder()
                builder.button(text="üìá –ö –∫–æ–Ω—Ç–∞–∫—Ç–∞–º", callback_data="contacts_menu")
                builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                builder.adjust(1)
                
                await message.reply(response_text, reply_markup=builder.as_markup(), parse_mode="HTML")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
                await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞.")
        else:
            await message.reply(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞!\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: {Config.PHONE_FORMATS.get('DEFAULT', '+XXXXXXXXXXXX')}"
            )

async def send_reply_to_client(admin_message: Message, contact_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É"""
    
    try:
        contact = db.get_contact(contact_id)
        if not contact or not contact.telegram_user_id:
            await admin_message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç Telegram ID")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É —á–µ—Ä–µ–∑ userbot
        if userbot_client:
            sent_message = await userbot_client.send_message(
                entity=contact.telegram_user_id,
                message=admin_message.text
            )
            message_id = sent_message.id
        else:
            # –ï—Å–ª–∏ userbot –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π –±–æ—Ç
            sent_message = await bot.send_message(
                chat_id=contact.telegram_user_id,
                text=admin_message.text
            )
            message_id = sent_message.message_id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É
        db.add_message(
            contact_id=contact_id,
            message_id=message_id,
            direction="outgoing",
            text=admin_message.text
        )
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        builder = InlineKeyboardBuilder()
        builder.button(text="üìñ –ò—Å—Ç–æ—Ä–∏—è", callback_data=f"history_{contact_id}")
        builder.button(text="üìá –ö–∞—Ä—Ç–æ—á–∫–∞", callback_data=f"contact_{contact_id}")
        builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        builder.adjust(2, 1)
        
        await admin_message.reply(
            f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É {contact.name}",
            reply_markup=builder.as_markup()
        )
        
        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É {contact.name} (ID: {contact_id})")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É: {e}")
        await admin_message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É")

async def send_message_to_client(admin_message: Message, contact_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É"""
    
    try:
        contact = db.get_contact(contact_id)
        if not contact or not contact.telegram_user_id:
            await admin_message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç Telegram ID")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É —á–µ—Ä–µ–∑ userbot
        if userbot_client:
            sent_message = await userbot_client.send_message(
                entity=contact.telegram_user_id,
                message=admin_message.text
            )
        else:
            # –ï—Å–ª–∏ userbot –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π –±–æ—Ç
            sent_message = await bot.send_message(
                chat_id=contact.telegram_user_id,
                text=admin_message.text
            )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É
        message_id = sent_message.id if hasattr(sent_message, 'id') else sent_message.message_id
        db.add_message(
            contact_id=contact_id,
            message_id=message_id,
            direction="outgoing",
            text=admin_message.text
        )
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        builder = InlineKeyboardBuilder()
        builder.button(text="üìñ –ò—Å—Ç–æ—Ä–∏—è", callback_data=f"history_{contact_id}")
        builder.button(text="üìá –ö–∞—Ä—Ç–æ—á–∫–∞", callback_data=f"contact_{contact_id}")
        builder.button(text="üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ", callback_data=f"send_to_{contact_id}")
        builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        builder.adjust(2, 1, 1)
        
        await admin_message.reply(
            f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É {contact.name}",
            reply_markup=builder.as_markup()
        )
        
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É {contact.name} (ID: {contact_id})")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É: {e}")
        await admin_message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É")

# –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ reply callback
@dp.callback_query(F.data.startswith("reply_"))
async def handle_reply_callback(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–û—Ç–≤–µ—Ç–∏—Ç—å'"""
    
    user_id = callback_query.from_user.id
    data = callback_query.data
    
    if not BotHandlers.is_admin(user_id):
        await callback_query.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    try:
        contact_id = int(data.split("_")[1])
        contact = db.get_contact(contact_id)
        
        if not contact:
            await callback_query.answer("‚ùå –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        user_reply_states[user_id] = contact_id
        
        reply_text = (
            f"üí¨ –û—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É: <b>{contact.name}</b>\n\n"
            f"üì± {contact.phone}\n"
            f"üìù {contact.note or '–ë–µ–∑ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π'}\n\n"
            f"‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n"
            f"–û–Ω –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É."
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üìñ –ò—Å—Ç–æ—Ä–∏—è", callback_data=f"history_{contact_id}")
        builder.button(text="üìá –ö–∞—Ä—Ç–æ—á–∫–∞", callback_data=f"contact_{contact_id}")
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_reply_{contact_id}")
        builder.adjust(2, 1)
        
        await callback_query.message.edit_text(
            reply_text, 
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
        
        await callback_query.answer("‚úçÔ∏è –û–∂–∏–¥–∞—é –≤–∞—à –æ—Ç–≤–µ—Ç...")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ reply callback: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ—Ç–≤–µ—Ç–∞
@dp.callback_query(F.data.startswith("cancel_reply_"))
async def handle_cancel_reply(callback_query: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É"""
    
    user_id = callback_query.from_user.id
    
    # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
    if user_id in user_reply_states:
        del user_reply_states[user_id]
    
    await callback_query.answer("‚ùå –û—Ç–≤–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
    await callback_query.message.edit_text(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é CRM —Å–∏—Å—Ç–µ–º—ã\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=BotHandlers.get_main_keyboard()
    )

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback
@dp.callback_query(F.data.startswith(("send_", "admin_", "history_", "view_", "set_telegram_id_")))
async def handle_additional_callbacks(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö callback"""
    
    user_id = callback_query.from_user.id
    data = callback_query.data
    
    if not BotHandlers.is_admin(user_id):
        await callback_query.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    try:
        # === –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ===
        if data == "send_by_contact":
            await show_contact_list_for_sending(callback_query)
        
        elif data.startswith("send_contacts_page_"):
            page = int(data.split("_")[-1])
            await show_contact_list_for_sending(callback_query, page)
        
        elif data.startswith("send_to_"):
            contact_id = int(data.split("_")[2])
            contact = db.get_contact(contact_id)
            
            if not contact:
                await callback_query.answer("‚ùå –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            user_message_states[user_id] = contact_id
            
            await callback_query.message.edit_text(
                f"üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç—É:\n\n"
                f"üë§ {contact.name}\n"
                f"üì± {contact.phone}\n\n"
                f"‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:"
            )
            await callback_query.answer("‚úçÔ∏è –û–∂–∏–¥–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        # === –ò–°–¢–û–†–ò–Ø –ü–ï–†–ï–ü–ò–°–ö–ò ===
        elif data == "history_by_contact":
            await show_contacts_for_history(callback_query)
        
        elif data.startswith("history_contacts_page_"):
            page = int(data.split("_")[-1])
            await show_contacts_for_history(callback_query, page)
        
        elif data.startswith("view_history_"):
            contact_id = int(data.split("_")[2])
            await show_chat_history(callback_query, contact_id)
        
        elif data.startswith("view_contact_"):
            contact_id = int(data.split("_")[2])
            await show_contact_card(callback_query, contact_id)
        
        elif data.startswith("set_telegram_id_"):
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram ID –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
            contact_id = int(data.split("_")[3])
            contact = db.get_contact(contact_id)
            
            if not contact:
                await callback_query.answer("‚ùå –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            await callback_query.answer("üîç –ò—â—É –∫–æ–Ω—Ç–∞–∫—Ç –≤ Telegram...", show_alert=False)
            
            # –ò—â–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ Telegram —á–µ—Ä–µ–∑ userbot
            if telegram_contacts_manager:
                try:
                    telegram_result = await telegram_contacts_manager.add_contact_to_telegram(contact.name, contact.phone)
                    
                    if telegram_result["success"]:
                        # –û–±–Ω–æ–≤–ª—è–µ–º telegram_user_id –≤ –±–∞–∑–µ
                        db.update_contact_telegram_id(contact_id, telegram_result["user_id"])
                        
                        username_info = f" (@{telegram_result['username']})" if telegram_result["username"] else ""
                        
                        success_text = (
                            f"‚úÖ Telegram ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n\n"
                            f"üë§ <b>–ò–º—è:</b> {contact.name}\n"
                            f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {contact.phone}\n"
                            f"üìù <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> {contact.note or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                            f"üÜî <b>ID:</b> {contact.id}\n\n"
                            f"‚úÖ <b>Telegram ID:</b> {telegram_result['user_id']}{username_info}"
                        )
                        
                        builder = InlineKeyboardBuilder()
                        builder.button(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å", callback_data=f"send_to_{contact_id}")
                        builder.button(text="üìñ –ò—Å—Ç–æ—Ä–∏—è", callback_data=f"history_{contact_id}")
                        builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                        builder.adjust(2, 1)
                        
                        await callback_query.message.edit_text(
                            success_text, 
                            reply_markup=builder.as_markup(),
                            parse_mode="HTML"
                        )
                        
                        logger.info(f"üì± Telegram ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {contact.name} -> {telegram_result['user_id']}")
                    else:
                        error_text = (
                            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç –≤ Telegram\n\n"
                            f"üë§ <b>–ò–º—è:</b> {contact.name}\n"
                            f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {contact.phone}\n"
                            f"üìù <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> {contact.note or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
                            f"‚ö†Ô∏è <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {telegram_result['message']}"
                        )
                        
                        builder = InlineKeyboardBuilder()
                        builder.button(text="üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"set_telegram_id_{contact_id}")
                        builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                        builder.adjust(1)
                        
                        await callback_query.message.edit_text(
                            error_text, 
                            reply_markup=builder.as_markup(),
                            parse_mode="HTML"
                        )
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ Telegram: {e}")
                    await callback_query.message.edit_text(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ Telegram:\n{str(e)}",
                        reply_markup=InlineKeyboardBuilder().button(
                            text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"
                        ).as_markup()
                    )
            else:
                await callback_query.message.edit_text(
                    "‚ùå Userbot –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω.\n–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
                    reply_markup=InlineKeyboardBuilder().button(
                        text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"
                    ).as_markup()
                )
        
        # === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–ê–ú–ò ===
        elif data == "admin_list":
            await show_admin_list(callback_query)
        
        elif data == "admin_add":
            await callback_query.message.edit_text(
                "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /add_admin USER_ID\n"
                "–ì–¥–µ USER_ID - Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            )
        
        elif data == "admin_remove":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            await show_admin_list(callback_query)
        

        
        else:
            await callback_query.answer("üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)
    
    await callback_query.answer()

# =================================================================
# üì® –§–£–ù–ö–¶–ò–ò –û–¢–ü–†–ê–í–ö–ò –°–û–û–ë–©–ï–ù–ò–ô
# =================================================================

async def show_send_message_menu(callback_query: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    menu_text = (
        "üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏:"
    )
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üìá –ü–æ –∫–æ–Ω—Ç–∞–∫—Ç—É", callback_data="send_by_contact")
    builder.button(text="üì± –ü–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞", callback_data="send_by_phone")
    builder.button(text="üîç –ù–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç", callback_data="send_search_contact")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
    builder.adjust(1)
    
    await callback_query.message.edit_text(menu_text, reply_markup=builder.as_markup())

async def show_contact_list_for_sending(callback_query: CallbackQuery, page: int = 0):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    
    offset = page * Config.CONTACTS_PER_PAGE
    contacts = db.get_all_contacts(limit=Config.CONTACTS_PER_PAGE, offset=offset)
    
    if not contacts:
        builder = InlineKeyboardBuilder()
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="message_send")
        
        await callback_query.message.edit_text(
            "üìã –ö–æ–Ω—Ç–∞–∫—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=builder.as_markup()
        )
        return
    
    contact_text = f"üìá –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç (—Å—Ç—Ä. {page + 1}):\n\n"
    
    builder = InlineKeyboardBuilder()
    for contact in contacts:
        contact_text += f"üë§ {contact.name} - {contact.phone}\n"
        builder.button(
            text=f"{contact.name}",
            callback_data=f"send_to_{contact.id}"
        )
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"send_contacts_page_{page-1}"))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –µ—â–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
    next_contacts = db.get_all_contacts(limit=1, offset=(page + 1) * Config.CONTACTS_PER_PAGE)
    if next_contacts:
        nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"send_contacts_page_{page+1}"))
    
    if nav_buttons:
        builder.row(*nav_buttons)
    
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="message_send")
    builder.adjust(1)
    
    await callback_query.message.edit_text(contact_text, reply_markup=builder.as_markup())

# =================================================================
# üóÇÔ∏è –§–£–ù–ö–¶–ò–ò –ò–°–¢–û–†–ò–ò –ü–ï–†–ï–ü–ò–°–ö–ò  
# =================================================================

async def show_history_menu(callback_query: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏"""
    
    menu_text = (
        "üóÇÔ∏è –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏:"
    )
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üìá –ü–æ –∫–æ–Ω—Ç–∞–∫—Ç—É", callback_data="history_by_contact")
    builder.button(text="üîç –ù–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç", callback_data="history_search_contact")
    builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∏", callback_data="history_stats")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
    builder.adjust(1)
    
    await callback_query.message.edit_text(menu_text, reply_markup=builder.as_markup())

async def show_contacts_for_history(callback_query: CallbackQuery, page: int = 0):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏"""
    
    offset = page * Config.CONTACTS_PER_PAGE
    contacts = db.get_all_contacts(limit=Config.CONTACTS_PER_PAGE, offset=offset)
    
    if not contacts:
        builder = InlineKeyboardBuilder()
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="history_view")
        
        await callback_query.message.edit_text(
            "üìã –ö–æ–Ω—Ç–∞–∫—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=builder.as_markup()
        )
        return
    
    contact_text = f"üìá –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç (—Å—Ç—Ä. {page + 1}):\n\n"
    
    builder = InlineKeyboardBuilder()
    for contact in contacts:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        messages = db.get_contact_messages(contact.id, limit=1)
        msg_count = len(db.get_contact_messages(contact.id, limit=1000))
        
        contact_text += f"üë§ {contact.name} - {contact.phone} ({msg_count} —Å–æ–æ–±—â.)\n"
        builder.button(
            text=f"{contact.name} ({msg_count})",
            callback_data=f"view_history_{contact.id}"
        )
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"history_contacts_page_{page-1}"))
    
    next_contacts = db.get_all_contacts(limit=1, offset=(page + 1) * Config.CONTACTS_PER_PAGE)
    if next_contacts:
        nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"history_contacts_page_{page+1}"))
    
    if nav_buttons:
        builder.row(*nav_buttons)
    
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="history_view")
    builder.adjust(1)
    
    await callback_query.message.edit_text(contact_text, reply_markup=builder.as_markup())

# =================================================================
# üîç –§–£–ù–ö–¶–ò–ò –ü–û–ò–°–ö–ê
# =================================================================

async def show_search_menu(callback_query: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ–∏—Å–∫–∞"""
    
    menu_text = (
        "üîç –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞:\n"
        "‚Ä¢ –ü–æ –∏–º–µ–Ω–∏\n"
        "‚Ä¢ –ü–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
        "‚Ä¢ –ü–æ –ø—Ä–∏–º–µ—á–∞–Ω–∏—é"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
    user_search_states[callback_query.from_user.id] = True
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")
    
    await callback_query.message.edit_text(menu_text, reply_markup=builder.as_markup())

async def perform_search(message: Message, query: str):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    
    try:
        contacts = db.search_contacts(query)
        
        if not contacts:
            builder = InlineKeyboardBuilder()
            builder.button(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_contacts")
            builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            builder.adjust(1)
            
            await message.reply(
                f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=builder.as_markup()
            )
            return
        
        if len(contacts) == 1:
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∫–æ–Ω—Ç–∞–∫—Ç, —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –∫–∞—Ä—Ç–æ—á–∫—É
            contact = contacts[0]
            await show_contact_card_from_search(message, contact)
            return
        
        result_text = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ '{query}' ({len(contacts)} –Ω–∞–π–¥–µ–Ω–æ):\n\n"
        
        builder = InlineKeyboardBuilder()
        
        for i, contact in enumerate(contacts[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É –∫–æ–Ω—Ç–∞–∫—Ç–∞ Telegram ID
            telegram_status = "‚úÖ" if contact.telegram_user_id else "‚ùå"
            
            result_text += (
                f"{i}. üë§ <b>{contact.name}</b>\n"
                f"üì± {contact.phone}\n"
                f"üìù {contact.note or '-'}\n"
                f"üì® Telegram: {telegram_status}\n\n"
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
            builder.button(
                text=f"üìá {contact.name}",
                callback_data=f"view_contact_{contact.id}"
            )
        
        if len(contacts) > 10:
            result_text += f"... –∏ –µ—â–µ {len(contacts) - 10} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        builder.button(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_contacts")
        builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        builder.adjust(2, 2, 1)  # –ü–æ 2 –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤, –ø–æ—Ç–æ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—è
        
        await message.reply(result_text, reply_markup=builder.as_markup(), parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.")

async def show_contact_card_from_search(message: Message, contact):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
    messages = db.get_contact_messages(contact.id, limit=100)
    incoming_count = len([m for m in messages if m.direction == "incoming"])
    outgoing_count = len([m for m in messages if m.direction == "outgoing"])
    
    card_text = (
        f"üìá –ù–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç:\n\n"
        f"üë§ <b>–ò–º—è:</b> {contact.name}\n"
        f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {contact.phone}\n"
        f"üìù <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> {contact.note or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"üÜî <b>ID:</b> {contact.id}\n"
        f"üìÖ <b>–î–æ–±–∞–≤–ª–µ–Ω:</b> {contact.date_added.strftime('%d.%m.%Y %H:%M')}\n\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"üì® –í—Ö–æ–¥—è—â–∏—Ö: {incoming_count}\n"
        f"üì§ –ò—Å—Ö–æ–¥—è—â–∏—Ö: {outgoing_count}\n"
        f"üí¨ –í—Å–µ–≥–æ: {len(messages)}"
    )
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üìñ –ò—Å—Ç–æ—Ä–∏—è", callback_data=f"history_{contact.id}")
    
    if contact.telegram_user_id:
        builder.button(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å", callback_data=f"send_to_{contact.id}")
        card_text += f"\n\n‚úÖ <b>Telegram ID:</b> {contact.telegram_user_id}"
    else:
        builder.button(text="üîó –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Telegram ID", callback_data=f"set_telegram_id_{contact.id}")
        card_text += f"\n\n‚ùå <b>Telegram ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>"
    
    builder.button(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_contacts")
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    builder.adjust(2, 1, 1)
    
    await message.reply(card_text, reply_markup=builder.as_markup(), parse_mode="HTML")

# =================================================================
# üë• –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê–ú–ò
# =================================================================

async def show_admin_menu(callback_query: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏"""
    
    # –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–∞–º–∏
    if callback_query.from_user.id != Config.OWNER_ID:
        await callback_query.answer("‚õî –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏.", show_alert=True)
        return
    
    admins = db.get_all_admins()
    admin_count = len(admins)
    
    menu_text = (
        f"üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏\n\n"
        f"üìä –í—Å–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admin_count}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤", callback_data="admin_list")
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="admin_add")
    builder.button(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="admin_remove")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
    builder.adjust(1)
    
    await callback_query.message.edit_text(menu_text, reply_markup=builder.as_markup())

async def show_admin_list(callback_query: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    
    admins = db.get_all_admins()
    
    if not admins:
        builder = InlineKeyboardBuilder()
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_manage")
        
        await callback_query.message.edit_text(
            "üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç.",
            reply_markup=builder.as_markup()
        )
        return
    
    admin_text = "üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n\n"
    
    builder = InlineKeyboardBuilder()
    
    for i, admin in enumerate(admins, 1):
        status = "üëë" if admin.telegram_user_id == Config.OWNER_ID else "üõ°Ô∏è"
        admin_text += (
            f"{i}. {status} @{admin.username}\n"
            f"üÜî ID: {admin.telegram_user_id}\n"
            f"üìÖ –î–æ–±–∞–≤–ª–µ–Ω: {admin.date_added.strftime('%d.%m.%Y')}\n\n"
        )
        
        if admin.telegram_user_id != Config.OWNER_ID:  # –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞
            builder.button(
                text=f"‚ûñ {admin.username}",
                callback_data=f"remove_admin_{admin.telegram_user_id}"
            )
    
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_manage")
    builder.adjust(1)
    
    await callback_query.message.edit_text(admin_text, reply_markup=builder.as_markup())

async def setup_bot_commands():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    commands = [
        BotCommand(command="start", description="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand(command="add_admin", description="üõ°Ô∏è –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
        BotCommand(command="list_admins", description="üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"),
    ]
    
    await bot.set_my_commands(commands)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    validation_errors = Config.validate_config()
    if validation_errors:
        print("‚ùå –û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
        for error in validation_errors:
            print(f"  {error}")
        print("\n–û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª Config.py –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏.")
        return
    
    if Config.BOT_MODE != "bot":
        print("‚ùå –î–ª—è —ç—Ç–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ BOT_MODE = 'bot' –≤ Config.py")
        return
    
    print("üöÄ –ó–∞–ø—É—Å–∫ Telegram CRM –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –æ–±—ã—á–Ω–æ–≥–æ –±–æ—Ç–∞...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db.init_db()
    
    # –û—á–∏—â–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤
    deleted_count = db.remove_duplicate_admins()
    if deleted_count > 0:
        print(f"üßπ –û—á–∏—â–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤: {deleted_count}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º userbot –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    await init_userbot_for_contacts()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥
    await setup_bot_commands()
    
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –æ–±—ã—á–Ω–æ–≥–æ –±–æ—Ç–∞!")
    
    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    Config.print_config_info()
    
    print("\n‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –±–æ—Ç—É –≤ Telegram –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        await dp.start_polling(bot, skip_updates=True)
    except KeyboardInterrupt:
        print("\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")
    finally:
        if userbot_client:
            try:
                await userbot_client.disconnect()
                logger.info("üîå Userbot –æ—Ç–∫–ª—é—á–µ–Ω")
            except:
                pass
        await bot.session.close()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}") 
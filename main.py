import os
from telethon import TelegramClient, events
from loguru import logger
import Config
from database.db import Database
from handlers.admin import AdminHandler
from handlers.contacts import ContactHandler
from handlers.messages import MessageHandler

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
os.makedirs(Config.LOGS_DIR, exist_ok=True)
os.makedirs(os.path.dirname(Config.DATABASE_PATH), exist_ok=True)
if Config.SAVE_MEDIA_FILES:
    os.makedirs(Config.MEDIA_DIR, exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.add(
    os.path.join(Config.LOGS_DIR, Config.LOG_FILE), 
    rotation=Config.LOG_MAX_SIZE, 
    level=Config.LOG_LEVEL,
    retention=Config.LOG_BACKUP_COUNT
)

if Config.LOG_TO_CONSOLE:
    logger.add(lambda msg: print(msg, end=""), level=Config.LOG_LEVEL)

def setup_handlers(client: TelegramClient, db: Database):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    AdminHandler(client, db)
    ContactHandler(client, db)
    MessageHandler(client, db)

async def interactive_auth(client):
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π 2FA"""
    
    def phone_code_callback():
        """–ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        code = input("üì± –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ Telegram: ").strip()
        return code
    
    def password_callback():
        """–ó–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è –¥–ª—è 2FA"""
        import getpass
        password = getpass.getpass("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ")
        return password
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    phone = Config.PHONE_NUMBER
    
    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ –∑–∞–¥–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not phone:
        print("\nüì± –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram")
        print("=" * 40)
        
        while True:
            phone = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +79001234567): ").strip()
            if not phone:
                print("‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
            import re
            if not re.match(Config.PHONE_REGEX, phone):
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞!")
                print(f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: {Config.PHONE_FORMATS.get('DEFAULT', '+XXXXXXXXXXXX')}")
                continue
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥
            Config.PHONE_NUMBER = phone
            break
    
    try:
        print(f"\nüîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –Ω–æ–º–µ—Ä–∞: {phone}")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ callback'–∞–º–∏
        await client.start(
            phone=phone,
            code_callback=phone_code_callback,
            password=password_callback
        )
        
        logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return False

async def main():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (API_ID –∏ API_HASH –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã)
    if not Config.API_ID or Config.API_ID == 0:
        print("‚ùå API_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ Config.py!")
        return
    
    if not Config.API_HASH:
        print("‚ùå API_HASH –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ Config.py!")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = Database(Config.DATABASE_PATH)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    connection_params = Config.get_connection_params()
    server_config = Config.get_telegram_server_config()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    client = TelegramClient(
        session=connection_params["session"],
        api_id=connection_params["api_id"],
        api_hash=connection_params["api_hash"],
        device_model=connection_params["device_model"],
        system_version=connection_params["system_version"],
        app_version=connection_params["app_version"],
        lang_code=connection_params["lang_code"],
        system_lang_code=connection_params["system_lang_code"],
        use_ipv6=connection_params["use_ipv6"],
        connection_retries=connection_params["connection_retries"],
        timeout=connection_params["timeout"],
        flood_sleep_threshold=connection_params["flood_sleep_threshold"]
    )
    
    try:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not await interactive_auth(client):
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è!")
            return
        
        logger.info("üöÄ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Telegram!")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        me = await client.get_me()
        if not Config.OWNER_ID:
            Config.OWNER_ID = me.id
            logger.info(f"üëë –í–ª–∞–¥–µ–ª–µ—Ü —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {me.first_name} (ID: {me.id})")
        
        if not Config.OWNER_USERNAME and me.username:
            Config.OWNER_USERNAME = me.username
            logger.info(f"üìõ Username –≤–ª–∞–¥–µ–ª—å—Ü–∞: @{me.username}")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≤ –∞–¥–º–∏–Ω—ã
        if Config.AUTO_ADD_OWNER_AS_ADMIN and not db.is_admin(me.id):
            try:
                username = me.username or me.phone or str(me.id)
                db.add_admin(username, me.id)
                logger.info(f"üõ°Ô∏è –í–ª–∞–¥–µ–ª–µ—Ü –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: @{username}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≤ –∞–¥–º–∏–Ω—ã: {e}")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        setup_handlers(client, db)
        logger.info("‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        Config.print_config_info()
        
        print("\n‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –±–æ—Ç—É –≤ Telegram –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
        await client.run_until_disconnected()
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.exception("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
    finally:
        try:
            await client.disconnect()
        except:
            pass

if __name__ == '__main__':
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ –±–æ—Ç
    validation_errors = Config.validate_config()
    if validation_errors:
        print("‚ùå –ë–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        print("–û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
        for error in validation_errors:
            print(f"  {error}")
        print("\n–û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª Config.py –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        exit(1)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    import asyncio
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ Telegram CRM –±–æ—Ç–∞...")
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ") 
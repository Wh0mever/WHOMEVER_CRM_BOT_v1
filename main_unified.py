import asyncio
import logging
from datetime import datetime
from pathlib import Path

from aiogram import Bot, Dispatcher, F, BaseMiddleware
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, BotCommand, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from telethon import TelegramClient, events
from telethon.tl.functions.contacts import ImportContactsRequest
from telethon.tl.types import InputPhoneContact
from telethon.errors import SessionPasswordNeededError, PhoneCodeInvalidError
from loguru import logger

import Config
from database.db import Database
from utils.date_helpers import format_date_display

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.remove()
logger.add(
    "logs/crm_unified.log",
    rotation="10 MB",
    retention="30 days",
    format="{time:YYYY-MM-DD HH:mm:ss.SSS} | {level} | {name}:{function}:{line} - {message}",
    level="INFO"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
db = Database()
bot = Bot(token=Config.BOT_TOKEN)
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
userbot_client = None
telegram_contacts_manager = None
user_states = {}
user_search_states = {}
user_message_states = {}
user_reply_states = {}

class TelegramContactsManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ Telegram —á–µ—Ä–µ–∑ userbot"""
    
    def __init__(self, client):
        self.client = client

    async def add_contact_to_telegram(self, name: str, phone: str):
        """–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –≤ Telegram –∏ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ user_id"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
            contact = InputPhoneContact(
                client_id=0,
                phone=phone,
                first_name=name,
                last_name=""
            )
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
            result = await self.client(ImportContactsRequest([contact]))
            
            if result.users:
                user = result.users[0]
                return {
                    "success": True,
                    "user_id": user.id,
                    "username": user.username,
                    "message": f"–ö–æ–Ω—Ç–∞–∫—Ç {name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ Telegram"
                }
            else:
                return {
                    "success": False,
                    "user_id": None,
                    "username": None,
                    "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Telegram"
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ Telegram: {e}")
            return {
                "success": False,
                "user_id": None,
                "username": None,
                "message": f"–û—à–∏–±–∫–∞: {str(e)}"
            }

async def init_userbot():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è userbot –∫–ª–∏–µ–Ω—Ç–∞"""
    global userbot_client, telegram_contacts_manager
    
    logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è userbot...")
    
    try:
        userbot_client = TelegramClient(
            'telegram_crm_session',
            Config.API_ID,
            Config.API_HASH,
            device_model="Telegram CRM",
            system_version="1.0.0",
            app_version="1.0.0",
            lang_code="ru",
            system_lang_code="ru"
        )
        
        await userbot_client.start(phone=Config.PHONE_NUMBER)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        telegram_contacts_manager = TelegramContactsManager(userbot_client)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        @userbot_client.on(events.NewMessage)
        async def handle_userbot_message(event):
            await process_userbot_incoming_message(event)
        
        logger.info("‚úÖ Userbot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ userbot: {e}")
        userbot_client = None

async def process_userbot_incoming_message(event):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ userbot"""
    try:
        sender = await event.get_sender()
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤ –∏ —Å–∞–º–æ–≥–æ —Å–µ–±—è
        if sender.bot or sender.id == (await userbot_client.get_me()).id:
            return
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞
        if sender.id == int(Config.BOT_TOKEN.split(':')[0]):
            return
            
        sender_name = f"{sender.first_name or ''} {sender.last_name or ''}".strip()
        if not sender_name:
            sender_name = sender.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        
        logger.info(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç: {sender_name} (ID: {sender.id})")
        
        # –ò—â–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        contact = db.get_contact_by_telegram_id(sender.id)
        
        if not contact:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
            phone = f"+{sender.id}"  # –í—Ä–µ–º–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
            note = f"Telegram: @{sender.username}" if sender.username else "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω"
            
            contact_id = db.add_contact(sender_name, phone, note)
            db.update_contact_telegram_id(contact_id, sender.id)
            contact = db.get_contact(contact_id)
            
            logger.info(f"üìá –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç: {sender_name}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        db.add_message(
            contact_id=contact.id,
            message_id=event.message.id,
            direction="incoming",
            text=event.message.text or "[–ú–µ–¥–∏–∞]"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        await notify_admins_about_incoming_message(contact, event.message, sender)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def notify_admins_about_incoming_message(contact, message, sender):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"""
    
    admins = db.get_all_admins()
    
    if not admins:
        return
    
    notification_text = (
        f"üì® –ù–æ–≤–æ–µ –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n"
        f"üë§ {contact.name}\n"
        f"üì± {contact.phone}\n"
        f"üÜî –ö–æ–Ω—Ç–∞–∫—Ç ID: {contact.id}\n"
        f"üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {contact.note or '-'}\n\n"
        f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:\n"
        f"{message.text or '[–ú–µ–¥–∏–∞ —Ñ–∞–π–ª]'}\n\n"
        f"‚è∞ {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    )
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{contact.id}")
    builder.button(text="üìñ –ò—Å—Ç–æ—Ä–∏—è", callback_data=f"history_{contact.id}")
    builder.button(text="üìá –ö–∞—Ä—Ç–æ—á–∫–∞", callback_data=f"view_contact_{contact.id}")
    builder.adjust(1)
    
    for admin in admins:
        try:
            await bot.send_message(
                chat_id=admin.telegram_user_id,
                text=notification_text,
                reply_markup=builder.as_markup()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin.username}: {e}")

class BotHandlers:
    """–ö–ª–∞—Å—Å —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –±–æ—Ç–∞"""
    
    @staticmethod
    def get_main_keyboard():
        """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
        builder = InlineKeyboardBuilder()
        builder.button(text="üìá –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts_menu")
        builder.button(text="üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="message_send")
        builder.button(text="üóÇÔ∏è –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏", callback_data="history_view")
        builder.button(text="üîç –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤", callback_data="search_contacts")
        builder.button(text="üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã", callback_data="admin_manage")
        builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats_view")
        builder.adjust(2, 2, 2)
        return builder.as_markup()
    
    @staticmethod
    def get_contacts_keyboard():
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏"""
        builder = InlineKeyboardBuilder()
        builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", callback_data="contacts_add")
        builder.button(text="üìã –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤", callback_data="contacts_list")
        builder.button(text="üîç –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞", callback_data="search_contacts")
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
        builder.adjust(1)
        return builder.as_markup()
    
    @staticmethod
    def is_admin(user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        return user_id == Config.OWNER_ID or db.is_admin(user_id)

# =================================================================
# üéØ –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê
# =================================================================

@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    username = message.from_user.username or "unknown"
    full_name = message.from_user.full_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    if not Config.OWNER_ID:
        Config.OWNER_ID = user_id
        db.set_owner(user_id, username)
        logger.info(f"üëë –í–ª–∞–¥–µ–ª–µ—Ü —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {full_name} (ID: {user_id})")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not BotHandlers.is_admin(user_id):
        await message.reply(
            "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å–∏—Å—Ç–µ–º–µ.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∞ (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω)
    if user_id == Config.OWNER_ID and not db.is_admin(user_id):
        db.add_admin(username, user_id)
    
    welcome_text = (
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CRM —Å–∏—Å—Ç–µ–º—É, {full_name}!\n\n"
        f"üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await message.reply(welcome_text, reply_markup=BotHandlers.get_main_keyboard())

@dp.message(Command("add_admin"))
async def cmd_add_admin(message: Message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = message.from_user.id
    
    # –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤
    if user_id != Config.OWNER_ID:
        await message.reply("‚õî –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    
    try:
        args = message.text.split()
        if len(args) != 2:
            await message.reply(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_admin USER_ID\n"
                "–ì–¥–µ USER_ID - Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            )
            return
        
        admin_id = int(args[1])
        
        if db.is_admin(admin_id):
            await message.reply("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è username)
        username = f"user_{admin_id}"  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
        
        db.add_admin(username, admin_id)
        Config.ADMIN_IDS.append(admin_id)
        
        await message.reply(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω: {username} (ID: {admin_id})")
        
    except ValueError:
        await message.reply("‚ùå USER_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

# =================================================================
# üìû –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK'–û–í
# =================================================================

@dp.callback_query(F.data.startswith(("main_", "contacts_", "message_", "history_", "search_", "admin_", "stats_")))
async def process_main_callbacks(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö callback'–æ–≤"""
    
    user_id = callback_query.from_user.id
    data = callback_query.data
    
    if not BotHandlers.is_admin(user_id):
        await callback_query.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    try:
        if data == "main_menu":
            await callback_query.message.edit_text(
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é CRM —Å–∏—Å—Ç–µ–º—ã\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=BotHandlers.get_main_keyboard()
            )
        
        elif data == "contacts_menu":
            await callback_query.message.edit_text(
                "üìá –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=BotHandlers.get_contacts_keyboard()
            )
        
        elif data == "contacts_add":
            user_states[user_id] = "adding_contact"
            await callback_query.message.edit_text(
                "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "–ò–º—è\n–¢–µ–ª–µ—Ñ–æ–Ω\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤\n"
                "+79001234567\n"
                "–í–ò–ü –∫–ª–∏–µ–Ω—Ç"
            )
        
        elif data == "contacts_list":
            await show_contacts_list(callback_query)
        
        elif data == "message_send":
            await show_send_message_menu(callback_query)
        
        elif data == "history_view":
            await show_history_menu(callback_query)
        
        elif data == "search_contacts":
            await show_search_menu(callback_query)
        
        elif data == "admin_manage":
            await show_admin_menu(callback_query)
        
        elif data == "stats_view":
            await show_stats(callback_query)
        
        else:
            await callback_query.answer("üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)
    
    await callback_query.answer()

# =================================================================
# üìá –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –ö–û–ù–¢–ê–ö–¢–ê–ú–ò
# =================================================================

async def show_contacts_list(callback_query: CallbackQuery, page: int = 0):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    
    offset = page * Config.CONTACTS_PER_PAGE
    contacts = db.get_all_contacts(limit=Config.CONTACTS_PER_PAGE, offset=offset)
    
    if not contacts:
        builder = InlineKeyboardBuilder()
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="contacts_menu")
        
        await callback_query.message.edit_text(
            "üìã –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø—É—Å—Ç.",
            reply_markup=builder.as_markup()
        )
        return
    
    contact_text = f"üìã –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (—Å—Ç—Ä. {page + 1}):\n\n"
    
    builder = InlineKeyboardBuilder()
    
    for contact in contacts:
        telegram_status = "‚úÖ" if contact.telegram_user_id else "‚ùå"
        contact_text += (
            f"üë§ {contact.name}\n"
            f"üì± {contact.phone}\n"
            f"üìù {contact.note or '-'}\n"
            f"üí¨ Telegram: {telegram_status}\n"
            f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        )
        
        builder.button(
            text=f"üìá {contact.name}",
            callback_data=f"view_contact_{contact.id}"
        )
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"contacts_page_{page-1}"))
    
    next_contacts = db.get_all_contacts(limit=1, offset=(page + 1) * Config.CONTACTS_PER_PAGE)
    if next_contacts:
        nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"contacts_page_{page+1}"))
    
    if nav_buttons:
        builder.row(*nav_buttons)
    
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="contacts_menu")
    builder.adjust(1)
    
    await callback_query.message.edit_text(contact_text, reply_markup=builder.as_markup())

# =================================================================
# üì® –§–£–ù–ö–¶–ò–ò –û–¢–ü–†–ê–í–ö–ò –°–û–û–ë–©–ï–ù–ò–ô
# =================================================================

async def show_send_message_menu(callback_query: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    menu_text = (
        "üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏:"
    )
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üìá –ü–æ –∫–æ–Ω—Ç–∞–∫—Ç—É", callback_data="send_by_contact")
    builder.button(text="üì± –ü–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞", callback_data="send_by_phone")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
    builder.adjust(1)
    
    await callback_query.message.edit_text(menu_text, reply_markup=builder.as_markup())

# =================================================================
# üóÇÔ∏è –§–£–ù–ö–¶–ò–ò –ò–°–¢–û–†–ò–ò
# =================================================================

async def show_history_menu(callback_query: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏"""
    
    menu_text = (
        "üóÇÔ∏è –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏:"
    )
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üìá –ü–æ –∫–æ–Ω—Ç–∞–∫—Ç—É", callback_data="history_by_contact")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
    builder.adjust(1)
    
    await callback_query.message.edit_text(menu_text, reply_markup=builder.as_markup())

# =================================================================
# üîç –§–£–ù–ö–¶–ò–ò –ü–û–ò–°–ö–ê
# =================================================================

async def show_search_menu(callback_query: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ–∏—Å–∫–∞"""
    
    menu_text = (
        "üîç –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞:\n"
        "‚Ä¢ –ü–æ –∏–º–µ–Ω–∏\n"
        "‚Ä¢ –ü–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
        "‚Ä¢ –ü–æ –ø—Ä–∏–º–µ—á–∞–Ω–∏—é"
    )
    
    user_search_states[callback_query.from_user.id] = True
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")
    
    await callback_query.message.edit_text(menu_text, reply_markup=builder.as_markup())

# =================================================================
# üë• –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ê–î–ú–ò–ù–ê–ú–ò
# =================================================================

async def show_admin_menu(callback_query: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏"""
    
    if callback_query.from_user.id != Config.OWNER_ID:
        await callback_query.answer("‚õî –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏.", show_alert=True)
        return
    
    admins = db.get_all_admins()
    admin_count = len(admins)
    
    menu_text = (
        f"üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏\n\n"
        f"üìä –í—Å–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admin_count}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤", callback_data="admin_list")
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="admin_add")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
    builder.adjust(1)
    
    await callback_query.message.edit_text(menu_text, reply_markup=builder.as_markup())

# =================================================================
# üìä –§–£–ù–ö–¶–ò–ò –°–¢–ê–¢–ò–°–¢–ò–ö–ò
# =================================================================

async def show_stats(callback_query: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    
    contacts_count = db.get_contacts_count()
    messages_total = db.get_messages_count()
    messages_today = db.get_messages_count_by_period(1)
    messages_week = db.get_messages_count_by_period(7)
    admins_count = len(db.get_all_admins())
    
    stats_text = (
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ CRM —Å–∏—Å—Ç–µ–º—ã\n\n"
        f"üë• –ö–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ –±–∞–∑–µ: {contacts_count}\n"
        f"üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_total}\n"
        f"üìÖ –°–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {messages_today}\n"
        f"üìà –°–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é: {messages_week}\n"
        f"üõ°Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admins_count}"
    )
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
    
    await callback_query.message.edit_text(stats_text, reply_markup=builder.as_markup())

# =================================================================
# üí¨ –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô
# =================================================================

@dp.message(F.text)
async def handle_text_messages(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    user_id = message.from_user.id
    
    if not BotHandlers.is_admin(user_id):
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
    if user_id in user_states and user_states[user_id] == "adding_contact":
        await process_adding_contact(message)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
    if user_id in user_search_states and user_search_states[user_id]:
        await process_search(message)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    if user_id in user_message_states:
        contact_id = user_message_states[user_id]
        await send_message_to_contact(message, contact_id)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if user_id in user_reply_states:
        contact_id = user_reply_states[user_id]
        await send_reply_to_contact(message, contact_id)
        return

async def process_adding_contact(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    
    user_id = message.from_user.id
    
    try:
        lines = message.text.strip().split('\n')
        
        if len(lines) < 2:
            await message.reply(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n"
                "–£–∫–∞–∂–∏—Ç–µ –º–∏–Ω–∏–º—É–º –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω."
            )
            return
        
        name = lines[0].strip()
        phone = lines[1].strip()
        note = lines[2].strip() if len(lines) > 2 else None
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ –±–∞–∑—É
        contact_id = db.add_contact(name, phone, note)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –≤ Telegram
        telegram_result = None
        if telegram_contacts_manager:
            try:
                telegram_result = await telegram_contacts_manager.add_contact_to_telegram(name, phone)
                if telegram_result["success"]:
                    db.update_contact_telegram_id(contact_id, telegram_result["user_id"])
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ Telegram: {e}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        success_text = f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\nüë§ {name}\nüì± {phone}\n"
        
        if note:
            success_text += f"üìù {note}\n"
        
        if telegram_result and telegram_result["success"]:
            username_info = f" (@{telegram_result['username']})" if telegram_result["username"] else ""
            success_text += f"‚úÖ Telegram ID: {telegram_result['user_id']}{username_info}"
        else:
            success_text += "‚ùå Telegram ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        builder.button(text="üìá –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts_menu")
        builder.adjust(1)
        
        await message.reply(success_text, reply_markup=builder.as_markup())
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        del user_states[user_id]
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞.")

async def process_search(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    
    user_id = message.from_user.id
    query = message.text.strip()
    
    try:
        contacts = db.search_contacts(query)
        
        if not contacts:
            builder = InlineKeyboardBuilder()
            builder.button(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_contacts")
            builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            builder.adjust(1)
            
            await message.reply(
                f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=builder.as_markup()
            )
        else:
            result_text = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ '{query}' ({len(contacts)} –Ω–∞–π–¥–µ–Ω–æ):\n\n"
            
            builder = InlineKeyboardBuilder()
            
            for contact in contacts[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                telegram_status = "‚úÖ" if contact.telegram_user_id else "‚ùå"
                result_text += (
                    f"üë§ {contact.name}\n"
                    f"üì± {contact.phone}\n"
                    f"üìù {contact.note or '-'}\n"
                    f"üí¨ Telegram: {telegram_status}\n"
                    f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                )
                
                builder.button(
                    text=f"üìá {contact.name}",
                    callback_data=f"view_contact_{contact.id}"
                )
            
            if len(contacts) > 10:
                result_text += f"... –∏ –µ—â–µ {len(contacts) - 10} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"
            
            builder.button(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_contacts")
            builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            builder.adjust(2, 2, 1)
            
            await message.reply(result_text, reply_markup=builder.as_markup())
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_search_states[user_id] = False
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.")

async def send_message_to_contact(message: Message, contact_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç—É —á–µ—Ä–µ–∑ userbot"""
    
    user_id = message.from_user.id
    
    try:
        contact = db.get_contact(contact_id)
        if not contact:
            await message.reply("‚ùå –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        if not contact.telegram_user_id:
            await message.reply("‚ùå –£ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Telegram ID.")
            return
        
        if not userbot_client:
            await message.reply("‚ùå Userbot –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω.")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ userbot
        await userbot_client.send_message(contact.telegram_user_id, message.text)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        db.add_message(
            contact_id=contact_id,
            message_id=0,  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            direction="outgoing",
            text=message.text
        )
        
        await message.reply(
            f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç—É {contact.name}",
            reply_markup=InlineKeyboardBuilder().button(
                text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"
            ).as_markup()
        )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        del user_message_states[user_id]
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")

async def send_reply_to_contact(message: Message, contact_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç—É"""
    
    user_id = message.from_user.id
    
    try:
        contact = db.get_contact(contact_id)
        if not contact:
            await message.reply("‚ùå –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        if not contact.telegram_user_id:
            await message.reply("‚ùå –£ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Telegram ID.")
            return
        
        if not userbot_client:
            await message.reply("‚ùå Userbot –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω.")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ userbot
        await userbot_client.send_message(contact.telegram_user_id, message.text)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        db.add_message(
            contact_id=contact_id,
            message_id=0,
            direction="outgoing", 
            text=message.text
        )
        
        await message.reply(
            f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç—É {contact.name}",
            reply_markup=InlineKeyboardBuilder().button(
                text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"
            ).as_markup()
        )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        del user_reply_states[user_id]
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞.")

# =================================================================
# üöÄ –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´
# =================================================================

async def setup_bot_commands():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    commands = [
        BotCommand(command="start", description="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand(command="add_admin", description="üõ°Ô∏è –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
    ]
    
    await bot.set_my_commands(commands)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    validation_errors = Config.validate_config()
    if validation_errors:
        print("‚ùå –û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
        for error in validation_errors:
            print(f"  {error}")
        print("\n–û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª Config.py –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏.")
        return
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π Telegram CRM —Å–∏—Å—Ç–µ–º—ã...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db.init_db()
    
    # –û—á–∏—â–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤
    deleted_count = db.remove_duplicate_admins()
    if deleted_count > 0:
        print(f"üßπ –û—á–∏—â–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤: {deleted_count}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º userbot
    await init_userbot()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥
    await setup_bot_commands()
    
    logger.info("üöÄ –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è CRM —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞!")
    
    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    Config.print_config_info()
    
    print("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –±–æ—Ç—É –≤ Telegram –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        await dp.start_polling(bot, skip_updates=True)
    except KeyboardInterrupt:
        print("\nüëã –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")
    finally:
        if userbot_client:
            try:
                await userbot_client.disconnect()
                logger.info("üîå Userbot –æ—Ç–∫–ª—é—á–µ–Ω")
            except:
                pass
        await bot.session.close()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
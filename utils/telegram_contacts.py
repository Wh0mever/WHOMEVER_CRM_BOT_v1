from telethon import types
from telethon.tl.functions.contacts import ImportContactsRequest
from loguru import logger
import Config
import asyncio

class TelegramContactsManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ Telegram"""
    
    def __init__(self, client):
        self.client = client
    
    async def add_contact_to_telegram(self, name: str, phone: str) -> dict:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç –≤ Telegram
        
        Args:
            name: –ò–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
            phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
            
        Returns:
            dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        """
        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
            await asyncio.sleep(Config.MESSAGE_SEND_DELAY)
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞
            input_contact = types.InputPhoneContact(
                client_id=0,  # –í—Ä–µ–º–µ–Ω–Ω—ã–π ID
                phone=phone,
                first_name=name.split()[0] if name else "–ö–æ–Ω—Ç–∞–∫—Ç",
                last_name=" ".join(name.split()[1:]) if len(name.split()) > 1 else ""
            )
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
            result = await self.client(ImportContactsRequest([input_contact]))
            
            if result.imported:
                # –ö–æ–Ω—Ç–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω
                imported_contact = result.imported[0]
                user_id = imported_contact.user_id
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                try:
                    user = await self.client.get_entity(user_id)
                    logger.info(f"üì± –ö–æ–Ω—Ç–∞–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ Telegram: {name} (@{user.username if user.username else user_id})")
                    
                    return {
                        "success": True,
                        "user_id": user_id,
                        "username": user.username,
                        "message": f"–ö–æ–Ω—Ç–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ Telegram"
                    }
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}: {e}")
                    return {
                        "success": True,
                        "user_id": user_id,
                        "username": None,
                        "message": f"–ö–æ–Ω—Ç–∞–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
                    }
            else:
                # –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –±—ã–ª –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–æ–º–µ—Ä –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ Telegram)
                logger.warning(f"üì± –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Telegram: {phone}")
                return {
                    "success": False,
                    "user_id": None,
                    "username": None,
                    "message": "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ Telegram"
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ Telegram: {e}")
            return {
                "success": False,
                "user_id": None,
                "username": None,
                "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {str(e)}"
            }
    
    async def search_contact_in_telegram(self, phone: str) -> dict:
        """
        –ò—â–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç –≤ Telegram –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        
        Args:
            phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            
        Returns:
            dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –∫–æ–Ω—Ç–∞–∫—Ç–µ
        """
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            user = await self.client.get_entity(phone)
            
            if user:
                logger.info(f"üîç –ö–æ–Ω—Ç–∞–∫—Ç –Ω–∞–π–¥–µ–Ω –≤ Telegram: {phone} -> @{user.username if user.username else user.id}")
                return {
                    "found": True,
                    "user_id": user.id,
                    "username": user.username,
                    "first_name": user.first_name,
                    "last_name": user.last_name,
                    "message": "–ö–æ–Ω—Ç–∞–∫—Ç –Ω–∞–π–¥–µ–Ω –≤ Telegram"
                }
            else:
                return {
                    "found": False,
                    "user_id": None,
                    "username": None,
                    "first_name": None,
                    "last_name": None,
                    "message": "–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
                }
                
        except Exception as e:
            logger.debug(f"–ö–æ–Ω—Ç–∞–∫—Ç {phone} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Telegram: {e}")
            return {
                "found": False,
                "user_id": None,
                "username": None,
                "first_name": None,
                "last_name": None,
                "message": f"–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {str(e)}"
            }
    
    async def update_contact_info(self, contact_id: int, db) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ –∏–∑ Telegram
        
        Args:
            contact_id: ID –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            db: –û–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –∏–∑ –±–∞–∑—ã
            contact = db.get_contact(contact_id)
            if not contact:
                return False
            
            # –ò—â–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ Telegram
            telegram_info = await self.search_contact_in_telegram(contact.phone)
            
            if telegram_info["found"]:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ
                db.update_contact_telegram_id(contact_id, telegram_info["user_id"])
                logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ: {contact.name} -> {telegram_info['user_id']}")
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ {contact_id}: {e}")
            return False
    
    async def batch_import_contacts(self, contacts_list: list) -> dict:
        """
        –ú–∞—Å—Å–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ Telegram
        
        Args:
            contacts_list: –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ [(name, phone), ...]
            
        Returns:
            dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–∞
        """
        
        if not contacts_list:
            return {"imported": 0, "failed": 0, "total": 0}
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
            input_contacts = []
            for i, (name, phone) in enumerate(contacts_list):
                if len(input_contacts) >= Config.MAX_NEW_CONTACTS_PER_HOUR:
                    logger.warning(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {Config.MAX_NEW_CONTACTS_PER_HOUR}")
                    break
                
                input_contact = types.InputPhoneContact(
                    client_id=i,
                    phone=phone,
                    first_name=name.split()[0] if name else "–ö–æ–Ω—Ç–∞–∫—Ç",
                    last_name=" ".join(name.split()[1:]) if len(name.split()) > 1 else ""
                )
                input_contacts.append(input_contact)
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–∞–∫–µ—Ç–æ–º
            result = await self.client(ImportContactsRequest(input_contacts))
            
            imported_count = len(result.imported) if result.imported else 0
            total_count = len(input_contacts)
            failed_count = total_count - imported_count
            
            logger.info(f"üì± –ú–∞—Å—Å–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {imported_count}/{total_count} —É—Å–ø–µ—à–Ω–æ")
            
            return {
                "imported": imported_count,
                "failed": failed_count, 
                "total": total_count,
                "details": result
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º –∏–º–ø–æ—Ä—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {e}")
            return {
                "imported": 0,
                "failed": len(contacts_list),
                "total": len(contacts_list),
                "error": str(e)
            }
    
    async def delete_contact_from_telegram(self, user_id: int) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç –∏–∑ Telegram
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è
        """
        
        try:
            # –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
            await self.client(types.contacts.DeleteContactsRequest([user_id]))
            logger.info(f"üóëÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç —É–¥–∞–ª–µ–Ω –∏–∑ Telegram: {user_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ {user_id}: {e}")
            return False 